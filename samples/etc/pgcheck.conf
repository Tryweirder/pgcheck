[global]
# user name to run daemon as
daemon_user = postgres

#
log_file = /var/log/pgcheck/pgcheck.log

# debug, info. warning, error, critical
log_level = info

#
pid_file = /var/run/pgcheck/pgcheck.pid

# path, where to run script from ($PWD)
working_dir = /tmp

# time interval for refreshing base priorities
base_prio_timeout = 10

# assign or not priorities for replicas depending on load
replics_weights = yes

# way to calculate load for replica (postgres/pgbouncer)
load_calculation = postgres

# additional parameters for connection string to get info about load for replicas
repl_append_string = user=monitor password=password connect_timeout=1

# pgbouncer connection string for getting host load
# needed only if replics_weights = yes and load_calculation = pgbouncer
pgbouncer_conn_string = port=6432 dbname=pgbouncer

# Parameters for defining datacenters for hosts

# Use http(s) handler
observer_class = RESTfulDCObserver
observer_url = http://admin.mycompany.tld/get_host_dc/%(hostname)s
observer_retry = 5
observer_retry_pause = 1
observer_timeout = 3

# Read from file
#observer_class = HardcodedDCObserver
#observer_filename = /etc/pgcheck-hosts.json

# Any custom python-module (depending on availability of importlib)
#observer_class = mymodule.MyDCObserver
#observer_arg1 = value1
#observer_arg2 = value2

#
# All other sections define clusters
#

[db1]
# connection string to local database with tables about shards, hosts and priorities
local_conn_string = dbname=db1 user=postgres

# additional parameters for connections strings for shards databases
append_conn_string = user=dbuser password=dbpassword connect_timeout=1

# number of checks, after which the priority can be changed
quorum = 2

# number of priorities, about which we additionally store information
hysterisis = 1
